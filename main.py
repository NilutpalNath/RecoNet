# -*- coding: utf-8 -*-
"""Hybrid Recommender.ipynb

Automatically generated by Colaboratory.

Note:- Currently search mechanism searches for anime using only Japanese Title
"""
import numpy as np
import pandas as pd
from collections import defaultdict
from tabulate import tabulate
import torch
from torch.utils.data import DataLoader
from model import AutoEncoder
from UserVector import UserVector

def find_anime(input_anime):
	for n in name_to_id.index:
		if input_anime in n.lower():
			print(name_to_id[n], '\t', n)

class PredictionEngine:

  def __init__(self):
    self.layer_sizes = [6670, 8192, 2048, 512, 256]
    self.model = AutoEncoder(layer_sizes=self.layer_sizes, nl_type='selu', is_constrained=True, dp_drop_prob=0.0, last_layer_activations=False)
    self.model.load_state_dict(torch.load('autoEncoder.pth'))
    self.model = self.model.cuda()
  
  def getPredictedRatings(self, user_dat, user_dl):
    for data in user_dl:
      inputs = data
      inputs = inputs.cuda()
      inputs = inputs.float()

      outputs = self.model(inputs)
      break

    return outputs.cpu().detach().numpy()

def similar_recommend(uratings, preds, aniId_to_ind):
  d = defaultdict(float)
  anime_ids = []

  for i in uratings:
    if(uratings[i]<7):
      continue
    AnimeSimilarity = similar_anime_genre.loc[i, :].values
    for ani_n_sim in AnimeSimilarity:
      ani_n_sim = eval(ani_n_sim)
      d[ani_n_sim[0]] += ani_n_sim[1]

  
  for aniId in d.keys():
    d[aniId] *= all_anime.loc[aniId, 'score']
    if str(aniId) not in aniId_to_ind.index:
      continue
    d[aniId] += preds[aniId_to_ind[str(aniId)]]*10 
 
  l = sorted(d, key=lambda aniId: d[aniId], reverse=True)

  count = 0
  t = []
  for i in l:
    if i in uratings.keys():
      continue
    
    count+=1
    r = [count, i, all_anime['title'][i], all_anime['title_english'][i], d[i]]
    t.append(r)
    anime_ids.append(i)
    if count==20:
      break
  
  table = tabulate(t, headers=['SNo', 'Anime Id', 'Name', 'English Name', 'Total Score'], tablefmt='orgtbl')
  print(table)

  return anime_ids

def top_animes(genre, ani_genre):
  top = []
  print("\nTop", genre)
  temp = list(ani_genre[ani_genre[genre]==1]['anime_id'])
  temp.sort(key=lambda x: all_anime['score'][x], reverse=True)
  l = [all_anime['score'][x] for x in temp]
  for i in range(5):
    r = [i+1, temp[i], all_anime['title'][temp[i]], all_anime['title_english'][temp[i]], all_anime['score'][temp[i]]]
    top.append(r)
  table = tabulate(top, headers=['SNo', 'Anime ID', 'Title', 'English Title', 'Anime Score'], tablefmt='orgtbl')
  print(table)

def show_recommendations(age, gender, uratings):
  if len(uratings)==0:
    ani_genre = pd.read_csv("anime_genres.csv", index_col=[0])
    
    top_animes('Shounen', ani_genre)
    top_animes('Supernatural', ani_genre)
    top_animes('Slice of Life', ani_genre)
    top_animes('Romance', ani_genre)
    top_animes('Magic', ani_genre)
    top_animes('Action', ani_genre)

    return
  
  user_dat = UserVector(age, gender, uratings)
  user_dl = DataLoader(dataset=user_dat, num_workers=1)
  aniId_to_ind = user_dat.anime_to_index()

  preds = model.getPredictedRatings(user_dat, user_dl)
  preds = preds.reshape(-1)
  topN = list(preds.argsort()[-50:][::-1])
  animes = list(map(user_dat.get_anime_id, topN))

  exclude_ids = []

  print("\n\nSimilar Animes:\n\n")
  exclude_ids = similar_recommend(uratings, preds, aniId_to_ind)

  print("\n\n\nAnime You May Like:\n\n")
  t = []
  ind, i = 0, -1
  for aniId in animes:
    i += 1
    if aniId in uratings.keys() or aniId in exclude_ids or aniId not in all_anime.index:
      continue
    ind += 1
    r = [ind, aniId, all_anime['title'][aniId], all_anime['title_english'][aniId], preds[topN[i]]]
    t.append(r)
    
    if ind == 20:
      break

  table = tabulate(t, headers=['SNo', 'Anime ID', 'Title', 'English Title', 'Predicted Ratings'], tablefmt='orgtbl')
  print(table)

def main():
	
  global all_anime 
  global name_to_id
  global similar_anime_genre
  global aniId_to_ind
  global model
  
  model = PredictionEngine()

  all_anime = pd.read_csv("complete_anime_cleaned.csv", index_col=[0])
  similar_anime_genre = pd.read_csv("similar_anime_genre.csv", index_col='anime_id')
  name_to_id = pd.Series(all_anime.index, index=all_anime['title'])

  age = int(input("Enter Age: "))
  gender = input("Enter Gender (Male/Female): ")
  input_ratings = {}

  c = input("Want to rate anime? [y/n]: ")
  if c == 'y':
    print("\nIt is recommended to rate atleast 5 animes. The more you rate, the better will be your recommendations.")
    print("Note:- Currently search mechanism searches for anime using only Japanese Title")
    while c=='y':
      while c=='y':
        p='n'
        while p=='n':
          input_anime = input("Enter Anime to search: ")
          find_anime(input_anime.lower())
          p = input("Anime found? [y/n]: ")

        aniId = int(input("Enter anime id: "))
        rate = int(input("Your rating: "))
        input_ratings[aniId] = rate

        c = input("\nRate more? [y/n]: ")

      show_recommendations(age, gender, input_ratings)

      c = input("\nRate More? [y/n]:")
      print("\n\n")

  else:
    show_recommendations(age, gender, input_ratings)

main()
